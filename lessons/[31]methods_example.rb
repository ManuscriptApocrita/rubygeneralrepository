# encoding: utf-8
#
# Программа 10 негритят – посвящается самому популярному роману Агаты Кристи
#
# https://ru.wikipedia.org/wiki/Десять_негритят
# https://ru.wikipedia.org/wiki/Десять_негритят_(фильм)

# Объявляем метод sklonenie. Этот метод будет возвращать правильную форму слова,
# когда нужно его использовать с числом. Например во фразах, типа «1 крокодил»,
# «23 крокодила», «7 крокодилов». У него будет 4 входных параметра: число и три
# формы слова:
#
# 1 крокодил — именительный падеж, единственное число
# 2 крокодила — родительный падеж, единственное число
# 8 крокодилов — родительный падеж, множественное число
def sklonenie(number, krokodil, krokodila, krokodilov)
  # Сначала, проверим входные данные на правильность
  if number == nil || !number.is_a?(Numeric)
    # Допустим, первый параметр пустой или не является числом (строка). Будем
    # считать, что нас это устроит, просто продолжаем как будто он нулевой.
    number = 0
  end

  # Так как склонение определяется последней цифрой в числе, вычислим остаток
  # от деления числа number на 10
  ostatok = number % 10

  # Для 1 — именительный падеж (Кто?/Что? — крокодил)
  if ostatok == 1
    return krokodil
  end

  # Для 2-4 — родительный падеж (2 Кого?/Чего? — крокодилов)
  if ostatok >= 2 && ostatok <= 4
    return krokodila
  end

  # 5-9 или ноль — родительный падеж и множественное число (8 Кого?/Чего? —
  # крокодилов)
  if (ostatok >= 5 && ostatok <= 9) || ostatok == 0
    return krokodilov
  end
end

# Берем из командной строки кол-во негритят
skolko = ARGV[0].to_i

# Выводим первую строчку детской считалки из романа Агаты Кристи
puts "#{skolko} #{sklonenie(skolko, 'негритёнок', 'негритёнка', 'негритят')} " \
  "#{sklonenie(skolko, 'пошел', 'пошли', 'пошли')} купаться в море!"

# Раскомментируйте эту строчку и убедитесь, что она не работает, т. к.
# переменная ostatok объявлена внутри метода sklonenie и не доступна извне
# puts ostatok

####


# encoding: utf-8

# Метод puts с параметром-строкой выводит эту строку
puts 'я строка 1'

# Метод puts без параметра выводит пустую строку
puts

# Передать параметры методу можно как в круглях скобках, так и без
puts('я строка 2')

# Создадим массив строк-имен и запишем его в переменную array
array = [
  'James Bond', 'Bradd Pit', 'Dr. Who', 'House MD', 'Madonna', 'Mr. Putin'
]

# Когда мы выводим массив на экран, мы у массива вызываем метод to_s без
# аргументов. А то, что получилось, передаем как аргумент в метод puts.
puts(array.to_s)

# Без аргументов метод pop удаляет один последний элемент
array.pop
puts array.to_s

# Если же аргумент есть — удаляется столько последних элементов, сколько указано
# в аргументе (array.pop равносильно array.pop(1)).
array.pop(2)
puts(array.to_s)

# Документация на метод pop
#
# http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-pop
#
# PS:
#
# Когда ставить, а когда не ставить скобки при вызове метода?
#
# Если метод очень часто используется и, фактически, стал ключевым словом,
# таким как puts или abort, то скобки не ставятся. Если же метод не такой
# распространенный (или если уж тем более вы написали его сами) — скобки нужны.
#
# puts 'Тут скобки не нужны'
#
# say_hi('А вот тут без них никуда')

####

# encoding: utf-8

# Вызываем метод now у объекта Time без аргументов (параметров). Этот метод
# возвращает значение (текущее время), которое мы запишем в переменную time.
# Возвращаемые значения часто сохраняют в переменных для дальнейшего
# использования.
time = Time.now

# А теперь передадим ранее сохраненное значение переменной time в качестве
# параметра в метод puts, чтобы вывести его на экран.
puts time

####


# encoding: utf-8

# Метод puts предоставлен нам ruby
puts 'я строка'

# Давайте попробуем объявить переменную puts
puts = 1

# На экран будет выведена единичка, но НИКОГДА НЕ ДЕЛАЙТЕ ТАК!
puts puts

# Имена ваших переменных и методов должны быть УНИКАЛЬНЫМИ и не совпадать
# с уже имеющимися в ruby методами и ключевыми словами
#
# Список ключевых слов ruby можно посмотреть тут:
#
# https://docs.ruby-lang.org/en/2.4.0/keywords_rdoc.html

####

# encoding: utf-8

# Часть 1. Определяем метод с единственным параметром name
def say_hi(name)
  # Все, что делает этот метод — здоровается с юзером
  puts "Привет, #{name}, как твои дела?"
end

# Вызовем пару раз наш метод для разных значений параметра
say_hi('Гоша')
say_hi('Даша')